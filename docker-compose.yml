version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: soup_and_nutz_postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: soup_and_nutz_dev
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - soup_and_nutz_network

  # Redis (optional, for caching/sessions if needed later)
  redis:
    image: redis:7-alpine
    container_name: soup_and_nutz_redis
    ports:
      - "6380:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - soup_and_nutz_network

  # Unit Test Service
  unit-test:
    build:
      context: .
      dockerfile: Dockerfile.test
    container_name: soup_and_nutz_unit_test
    environment:
      MIX_ENV: test
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/soup_and_nutz_test
      SECRET_KEY_BASE: your-secret-key-base-here-for-testing-only-do-not-use-in-production
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - soup_and_nutz_network
    profiles:
      - test
    command: sh -c "mix ecto.create && mix ecto.migrate && mix test --exclude e2e"

volumes:
  postgres_data:
  redis_data:

networks:
  soup_and_nutz_network:
    driver: bridge 